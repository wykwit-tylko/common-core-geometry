from typing import Iterator, Optional, Tuple

class Point3D:
    x: float
    y: float
    z: float
    
    def __init__(self, x: float, y: float, z: float) -> None: ...
    
    @staticmethod
    def origin() -> Point3D: ...
    
    def distance_to(self, other: Point3D) -> float: ...
    def midpoint(self, other: Point3D) -> Point3D: ...
    
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...
    def __iter__(self) -> Iterator[float]: ...

class Vector3D:
    x: float
    y: float
    z: float
    
    def __init__(self, x: float, y: float, z: float) -> None: ...
    
    @staticmethod
    def zero() -> Vector3D: ...
    @staticmethod
    def unit_x() -> Vector3D: ...
    @staticmethod
    def unit_y() -> Vector3D: ...
    @staticmethod
    def unit_z() -> Vector3D: ...
    
    def magnitude(self) -> float: ...
    def normalize(self) -> Vector3D: ...
    def dot(self, other: Vector3D) -> float: ...
    def cross(self, other: Vector3D) -> Vector3D: ...
    
    def __add__(self, other: Vector3D) -> Vector3D: ...
    def __sub__(self, other: Vector3D) -> Vector3D: ...
    def __mul__(self, scalar: float) -> Vector3D: ...
    def __rmul__(self, scalar: float) -> Vector3D: ...
    def __neg__(self) -> Vector3D: ...
    
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...
    def __iter__(self) -> Iterator[float]: ...

class Sphere:
    center: Point3D
    radius: float
    
    def __init__(self, center: Point3D, radius: float) -> None: ...
    
    def volume(self) -> float: ...
    def surface_area(self) -> float: ...
    def contains(self, point: Point3D) -> bool: ...
    
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Ray:
    origin: Point3D
    direction: Vector3D
    
    def __init__(self, origin: Point3D, direction: Vector3D) -> None: ...
    
    def point_at(self, t: float) -> Point3D: ...
    def intersect_sphere(self, sphere: Sphere) -> Optional[Tuple[float, Point3D]]: ...
    def intersect_plane(self, plane: Plane) -> Optional[Point3D]: ...
    def intersect_triangle(self, triangle: Triangle) -> Optional[Tuple[float, Point3D]]: ...
    
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Triangle:
    a: Point3D
    b: Point3D
    c: Point3D
    
    def __init__(self, a: Point3D, b: Point3D, c: Point3D) -> None: ...
    
    def area(self) -> float: ...
    def normal(self) -> Vector3D: ...
    def centroid(self) -> Point3D: ...
    
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Plane:
    normal: Vector3D
    d: float
    
    @staticmethod
    def from_point_normal(point: Point3D, normal: Vector3D) -> Plane: ...
    @staticmethod
    def from_three_points(p1: Point3D, p2: Point3D, p3: Point3D) -> Plane: ...
    
    def distance_to(self, point: Point3D) -> float: ...
    def contains(self, point: Point3D, epsilon: float = 1e-6) -> bool: ...
    
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class AABB:
    min: Point3D
    max: Point3D
    
    def __init__(self, min: Point3D, max: Point3D) -> None: ...
    
    def volume(self) -> float: ...
    def surface_area(self) -> float: ...
    def contains(self, point: Point3D) -> bool: ...
    def center(self) -> Point3D: ...
    def expand(self, amount: float) -> AABB: ...
    def intersects(self, other: AABB) -> bool: ...
    
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class LineSegment:
    start: Point3D
    end: Point3D
    
    def __init__(self, start: Point3D, end: Point3D) -> None: ...
    
    def length(self) -> float: ...
    def midpoint(self) -> Point3D: ...
    
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

__all__ = [
    "Point3D",
    "Vector3D",
    "Sphere",
    "Ray",
    "Triangle",
    "Plane",
    "AABB",
    "LineSegment",
]
