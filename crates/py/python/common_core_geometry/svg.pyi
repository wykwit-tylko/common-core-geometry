from typing import Optional
from . import Point3D, Vector3D, Sphere, Triangle, LineSegment, AABB

class Camera:
    @staticmethod
    def perspective(
        position: Point3D,
        target: Point3D,
        up: Vector3D,
        fov: float,
        aspect: float,
        near: float = 0.1,
        far: float = 100.0
    ) -> Camera: ...
    
    @staticmethod
    def orthographic(
        position: Point3D,
        target: Point3D,
        up: Vector3D,
        width: float,
        height: float,
        near: float = 0.1,
        far: float = 100.0
    ) -> Camera: ...

class SVGRenderer:
    def __init__(self, width: int, height: int, camera: Camera) -> None: ...
    
    def set_background_color(self, color: str) -> None: ...
    def add_point(self, point: Point3D, color: Optional[str] = None, radius: Optional[float] = None) -> None: ...
    def add_line_segment(self, segment: LineSegment, color: Optional[str] = None, width: Optional[float] = None) -> None: ...
    def add_triangle(self, triangle: Triangle, stroke: Optional[str] = None, fill: Optional[str] = None, stroke_width: Optional[float] = None) -> None: ...
    def add_sphere(self, sphere: Sphere, color: Optional[str] = None, segments: Optional[int] = None) -> None: ...
    def add_aabb(self, aabb: AABB, color: Optional[str] = None, width: Optional[float] = None) -> None: ...
    
    def render(self) -> str: ...
    def save(self, path: str) -> None: ...
    
    def __repr__(self) -> str: ...
    def __enter__(self) -> SVGRenderer: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

__all__ = ["Camera", "SVGRenderer"]
