from common_core_geometry import Point3D, Vector3D, Sphere, Ray, Triangle, Plane, AABB, LineSegment

print("=== Basic Geometry Example ===\n")

print("1. Creating Points and Vectors:")
p1 = Point3D(0, 0, 0)
p2 = Point3D(1, 2, 3)
print(f"  p1 = {p1}")
print(f"  p2 = {p2}")
print(f"  Distance: {p1.distance_to(p2):.2f}")
print(f"  Midpoint: {p1.midpoint(p2)}")

v1 = Vector3D(1, 0, 0)
v2 = Vector3D(0, 1, 0)
print(f"\n  v1 = {v1}")
print(f"  v2 = {v2}")
print(f"  Dot product: {v1.dot(v2)}")
print(f"  Cross product: {v1.cross(v2)}")

print("\n2. Creating a Sphere:")
center = Point3D(0, 0, 0)
sphere = Sphere(center, 2.0)
print(f"  {sphere}")
print(f"  Volume: {sphere.volume():.2f}")
print(f"  Surface area: {sphere.surface_area():.2f}")

test_point = Point3D(0.5, 0.5, 0.5)
print(f"  Point {test_point} inside sphere: {sphere.contains(test_point)}")

print("\n3. Ray Casting:")
origin = Point3D(0, 0, 10)
direction = Vector3D(0, 0, -1).normalize()
ray = Ray(origin, direction)
print(f"  {ray}")
print(f"  Point at t=5: {ray.point_at(5.0)}")

print("\n4. Creating a Triangle:")
a = Point3D(0, 0, 0)
b = Point3D(1, 0, 0)
c = Point3D(0, 1, 0)
triangle = Triangle(a, b, c)
print(f"  Area: {triangle.area():.2f}")
print(f"  Normal: {triangle.normal()}")
print(f"  Centroid: {triangle.centroid()}")

print("\n5. Creating a Plane:")
plane = Plane.from_point_normal(Point3D(0, 0, 0), Vector3D(0, 0, 1))
print(f"  {plane}")
test_point = Point3D(1, 1, 0)
print(f"  Distance from {test_point}: {plane.distance_to(test_point):.2f}")
print(f"  Contains {test_point}: {plane.contains(test_point)}")

print("\n6. Creating an AABB:")
min_point = Point3D(-1, -1, -1)
max_point = Point3D(1, 1, 1)
aabb = AABB(min_point, max_point)
print(f"  {aabb}")
print(f"  Center: {aabb.center()}")
print(f"  Volume: {aabb.volume():.2f}")

print("\n7. Creating a Line Segment:")
start = Point3D(0, 0, 0)
end = Point3D(3, 4, 0)
segment = LineSegment(start, end)
print(f"  Length: {segment.length():.2f}")
print(f"  Midpoint: {segment.midpoint()}")
