/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_sphere_free: (a: number, b: number) => void;
export const sphere_new: (a: number, b: number) => [number, number, number];
export const sphere_center: (a: number) => number;
export const sphere_radius: (a: number) => number;
export const sphere_volume: (a: number) => number;
export const sphere_surfaceArea: (a: number) => number;
export const sphere_contains: (a: number, b: number) => number;
export const __wbg_svgrenderer_free: (a: number, b: number) => void;
export const svgrenderer_new: (a: number, b: number, c: number) => number;
export const svgrenderer_setBackground: (a: number, b: number, c: number) => void;
export const svgrenderer_addPoint: (a: number, b: number, c: number, d: number, e: number) => void;
export const svgrenderer_addLineSegment: (a: number, b: number, c: number, d: number, e: number) => void;
export const svgrenderer_addTriangle: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
export const svgrenderer_addSphere: (a: number, b: number, c: number, d: number, e: number) => void;
export const svgrenderer_addAabb: (a: number, b: number, c: number, d: number, e: number) => void;
export const svgrenderer_toSvgString: (a: number) => [number, number];
export const __wbg_camera_free: (a: number, b: number) => void;
export const camera_perspective: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
export const camera_orthographic: (a: number, b: number, c: number, d: number, e: number) => number;
export const camera_viewMatrix: (a: number) => [number, number];
export const camera_projectionMatrix: (a: number) => [number, number];
export const __wbg_plane_free: (a: number, b: number) => void;
export const plane_fromPointNormal: (a: number, b: number) => [number, number, number];
export const plane_fromThreePoints: (a: number, b: number, c: number) => [number, number, number];
export const plane_normal: (a: number) => number;
export const plane_d: (a: number) => number;
export const plane_distanceToPoint: (a: number, b: number) => number;
export const plane_closestPoint: (a: number, b: number) => number;
export const plane_containsPoint: (a: number, b: number) => number;
export const plane_flipNormal: (a: number) => number;
export const plane_isParallel: (a: number, b: number) => number;
export const __wbg_triangle_free: (a: number, b: number) => void;
export const triangle_new: (a: number, b: number, c: number) => [number, number, number];
export const triangle_b: (a: number) => number;
export const triangle_c: (a: number) => number;
export const triangle_normal: (a: number) => number;
export const triangle_area: (a: number) => number;
export const triangle_centroid: (a: number) => number;
export const triangle_barycentricCoords: (a: number, b: number) => [number, number];
export const triangle_containsPoint: (a: number, b: number) => number;
export const triangle_a: (a: number) => number;
export const __wbg_linesegment_free: (a: number, b: number) => void;
export const linesegment_new: (a: number, b: number) => [number, number, number];
export const linesegment_start: (a: number) => number;
export const linesegment_end: (a: number) => number;
export const linesegment_length: (a: number) => number;
export const linesegment_direction: (a: number) => number;
export const linesegment_midpoint: (a: number) => number;
export const linesegment_pointAt: (a: number, b: number) => number;
export const linesegment_closestPoint: (a: number, b: number) => number;
export const linesegment_distanceToPoint: (a: number, b: number) => number;
export const __wbg_point3d_free: (a: number, b: number) => void;
export const point3d_new: (a: number, b: number, c: number) => number;
export const point3d_x: (a: number) => number;
export const point3d_y: (a: number) => number;
export const point3d_z: (a: number) => number;
export const point3d_distanceTo: (a: number, b: number) => number;
export const point3d_midpoint: (a: number, b: number) => number;
export const point3d_translate: (a: number, b: number) => number;
export const point3d_toArray: (a: number) => [number, number];
export const point3d_fromArray: (a: number, b: number) => [number, number, number];
export const point3d_origin: () => number;
export const init: () => void;
export const __wbg_ray_free: (a: number, b: number) => void;
export const ray_new: (a: number, b: number) => [number, number, number];
export const ray_origin: (a: number) => number;
export const ray_direction: (a: number) => number;
export const ray_pointAt: (a: number, b: number) => number;
export const ray_intersectSphere: (a: number, b: number) => any;
export const ray_intersectPlane: (a: number, b: number) => any;
export const ray_intersectTriangle: (a: number, b: number) => any;
export const __wbg_vector3d_free: (a: number, b: number) => void;
export const vector3d_new: (a: number, b: number, c: number) => number;
export const vector3d_x: (a: number) => number;
export const vector3d_y: (a: number) => number;
export const vector3d_z: (a: number) => number;
export const vector3d_magnitude: (a: number) => number;
export const vector3d_normalize: (a: number) => [number, number, number];
export const vector3d_dot: (a: number, b: number) => number;
export const vector3d_cross: (a: number, b: number) => number;
export const vector3d_add: (a: number, b: number) => number;
export const vector3d_sub: (a: number, b: number) => number;
export const vector3d_scale: (a: number, b: number) => number;
export const vector3d_angle: (a: number, b: number) => number;
export const vector3d_projectOnto: (a: number, b: number) => number;
export const vector3d_isParallel: (a: number, b: number) => number;
export const vector3d_isPerpendicular: (a: number, b: number) => number;
export const vector3d_toArray: (a: number) => [number, number];
export const vector3d_fromArray: (a: number, b: number) => [number, number, number];
export const vector3d_zero: () => number;
export const vector3d_unitX: () => number;
export const vector3d_unitY: () => number;
export const vector3d_unitZ: () => number;
export const vector3d_fromPoints: (a: number, b: number) => number;
export const __wbg_aabb_free: (a: number, b: number) => void;
export const aabb_new: (a: number, b: number) => [number, number, number];
export const aabb_fromPoints: (a: number, b: number) => [number, number, number];
export const aabb_min: (a: number) => number;
export const aabb_max: (a: number) => number;
export const aabb_center: (a: number) => number;
export const aabb_size: (a: number) => number;
export const aabb_volume: (a: number) => number;
export const aabb_surfaceArea: (a: number) => number;
export const aabb_diagonal: (a: number) => number;
export const aabb_containsPoint: (a: number, b: number) => number;
export const aabb_intersects: (a: number, b: number) => number;
export const aabb_union: (a: number, b: number) => number;
export const aabb_expandByPoint: (a: number, b: number) => number;
export const aabb_expandByScalar: (a: number, b: number) => number;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_3: WebAssembly.Table;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_start: () => void;
